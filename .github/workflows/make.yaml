name: make
on: [push]
jobs:
  ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        compiler: [gcc, clang]
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          sudo apt -qq update
          sudo apt install -y autoconf automake bison ccache dvipng epstool fig2dev flex g++ gcc gfortran gnuplot-x11 gperf gzip icoutils libarpack2-dev libblas-dev libcurl4-gnutls-dev libfftw3-dev libfltk1.3-dev libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libgl2ps-dev libglpk-dev libgraphicsmagick++1-dev libhdf5-dev liblapack-dev libosmesa6-dev libpcre3-dev libqhull-dev libqscintilla2-qt5-dev libqrupdate-dev libreadline-dev librsvg2-bin libsndfile1-dev libsuitesparse-dev libsundials-dev libtool libxft-dev llvm-dev make openjdk-8-jdk perl portaudio19-dev pstoedit qtbase5-dev qttools5-dev qttools5-dev-tools rsync tar texinfo texlive-latex-extra xvfb zlib1g-dev           
      - name: install dependencies
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          sudo apt -qq update
          sudo apt install -y autoconf automake bison clang ccache dvipng epstool fig2dev flex gfortran gnuplot-x11 gperf gzip icoutils libarpack2-dev libblas-dev libcurl4-gnutls-dev libfftw3-dev libfltk1.3-dev libfontconfig1-dev libfreetype6-dev libgl1-mesa-dev libgl2ps-dev libglpk-dev libgraphicsmagick++1-dev libhdf5-dev liblapack-dev libosmesa6-dev libpcre3-dev libqhull-dev libqrupdate-dev libqscintilla2-qt5-dev libreadline-dev librsvg2-bin libsndfile1-dev libsuitesparse-dev libsundials-dev libtool libxft-dev llvm-dev make openjdk-8-jdk perl portaudio19-dev pstoedit qtbase5-dev qttools5-dev qttools5-dev-tools rsync tar texinfo texlive-latex-extra xvfb zlib1g-dev
      - name: prepare ccache timestamp
        id: ccache_cache_timestamp
        run: echo "::set-output name=TIMESTAMP::$(date +"%Y-%m-%d_%H-%M-%S")"
      - name: setup ccache
        uses: actions/cache@v2
        with:
          path: /home/runner/.ccache
          key: ccache:${{ matrix.os }}:${{ matrix.compiler }}:build:${{ github.ref }}:${{ steps.ccache_cache_timestamp.outputs.timestamp }}:${{ github.sha }}
          restore-keys: |
            ccache:${{ matrix.os }}:${{ matrix.compiler }}:build:${{ github.ref }}
            ccache:${{ matrix.os }}:${{ matrix.compiler }}:build
      - name: bootstrap
        run: ./bootstrap
      - name: configure
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          mkdir .build
          cd .build && ../configure CC="ccache gcc" CXX="ccache g++" F77="ccache gfortran" CPPFLAGS="-I/usr/include/hdf5/serial -I/usr/include/suitesparse" LDFLAGS="-L/usr/lib/$(dpkg-architecture -qDEB_HOST_MULTIARCH)/hdf5/serial" --prefix=${HOME}/usr
      - name: configure
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          mkdir .build
          cd .build && ../configure CC="ccache clang" CXX="ccache clang++" F77="ccache gfortran" CPPFLAGS="-I/usr/include/hdf5/serial -I/usr/include/suitesparse" LDFLAGS="-L/usr/lib/$(dpkg-architecture -qDEB_HOST_MULTIARCH)/hdf5/serial" --prefix=${HOME}/usr
      - name: build
        run: xvfb-run -a -s '-screen 0 640x480x24' make -C ./.build -j2 all
      - name: ccache status
        run: ccache -s
      - name: check
        run: xvfb-run -a -s '-screen 0 640x480x24' make -C ./.build check
